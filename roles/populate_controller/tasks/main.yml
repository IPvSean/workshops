---
- name: Load automation controller vars for specific workshop type
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ role_path }}/vars/{{ workshop_type }}.yml"
    - "{{ role_path }}/vars/unsupported_workshop.yml"

- name: Ensure controller is online and working
  ansible.builtin.uri:
    url: "https://localhost:{{ aap_port | default('443') }}/api/controller/v2/ping/"
    method: GET
    user: admin
    password: "{{ admin_password }}"
    validate_certs: false
    force_basic_auth: true
  register: controller_online
  until: controller_online is success
  delay: 3
  retries: 5

# Disable collections requirements.yml and rely on only EEs
- name: Turn off AWX_COLLECTIONS_ENABLED on controller
  ansible.controller.settings:
    name: AWX_COLLECTIONS_ENABLED
    value: false
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}:{{ aap_port | default('443') }}"
    validate_certs: false

#### CREDENTIAL
- name: Add SSH credential into Automation controller
  ansible.controller.credential:
    name: "Workshop Credential"
    credential_type: Machine
    organization: "Default"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}:{{ aap_port | default('443') }}"
    validate_certs: false
    inputs:
      username: ec2-user
      ssh_key_data: "{{ lookup('file', output_dir + '/' + ec2_name_prefix + '-private.pem') }}"

- name: Add controller credential into automation controller
  ansible.controller.credential:
    name: "Controller Credential"
    credential_type: Red Hat Ansible Automation Platform
    organization: Default
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}:{{ aap_port | default('443') }}"
    validate_certs: false
    inputs:
      host: "{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
      username: admin
      password: "{{ admin_password }}"
#### END OF CREDENTIAL

#### Inventory
- name: Create workshop inventory
  ansible.controller.inventory:
    name: "Workshop Inventory"
    organization: "Default"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}:{{ aap_port | default('443') }}"
    validate_certs: false
  register: workshop_inventory
  until: workshop_inventory is success
  delay: 3
  retries: 5

### USER
- name: Add student user
  ansible.platform.user:
    username: "{{ student }}"
    password: "{{ admin_password }}"
    email: fake@fake.com
    state: present
    superuser: true
    gateway_username: admin
    gateway_password: "{{ admin_password }}"
    gateway_hostname: "https://{{ ansible_host }}:{{ aap_port | default('443') }}"
    validate_certs: false

# Workshop specific execution environments
- name: Add specific workshop execution environment
  ansible.controller.execution_environment:
    name: "{{ workshop_type }} workshop execution environment"
    image: "{{ lookup('vars', workshop_type + '_ee') }}"
    pull: missing
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}:{{ aap_port | default('443') }}"
    validate_certs: false

- name: Setup workshop specific controller information
  ansible.builtin.include_tasks: "{{ item }}"
  with_first_found:
    - "{{ role_path }}/tasks/{{ workshop_type }}.yml"
    - "{{ role_path }}/tasks/unsupported_workshop.yml"
